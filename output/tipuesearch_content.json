{"pages":[{"title":"About me","url":"//amit.visrolia.net/pages/amit.html","text":"I am a chartered engineer with a PhD in computational mechanics. I've spent time in the aerospace industry, doing analysis of metals and composites, and hacking away in Matlab, Python, Perl, Fortran, Abaqus and probably a few other languages too. This blog has been started with the intention of consolidating stuff that was on my old Google sites page, Evernote, Google Keep, OneNote and Tumblr. I'll also try to documenting a few things that I'd rather not forget, but who knows where it will end up. PGP lookup: 6A29 CF02 E7D2 8009 CAAD 10DF 227D 65AB 0396 DE9A","tags":"misc"},{"title":"Credits","url":"//amit.visrolia.net/pages/credits.html","text":"Authored by Amit Generated by Pelican Theme taken from flex by Alexandre Vicenzi Search using Tipue Search Pelican plugin \\(\\LaTeX\\) rendering using render_math Licences Unless otherwise specified, everything of my own that I share here is shared under the Creative Commons Attribution-NonCommercial 4.0 International License . if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"misc"},{"title":"Great North Run","url":"//amit.visrolia.net/gnr2016.html","text":"","tags":"Pictures"},{"title":"Interleaving two pdf files","url":"//amit.visrolia.net/interleavepdf.html","text":"1 2 3 4 5 6 7 8 9 pdftk $1 burst output %04d_A.pdf pdftk $2 burst output %04d_B.pdf rm $1 rm $2 pdftk *.pdf cat output output.pdf rm ????_?.pdf","tags":"Notes"},{"title":"Cropping a pdf file","url":"//amit.visrolia.net/croppdf.html","text":"1 gs -o $output -sDEVICE = pdfwrite -c \"[/CropBox [ $x0 $y0 $x1 $y1 ]\" -c \" /PAGES pdfmark\" -f $1","tags":"Notes"},{"title":"10 of the best National Parks in France","url":"//amit.visrolia.net/frenchparks.html","text":"The Guardian","tags":"Links"},{"title":"San Fermin","url":"//amit.visrolia.net/sanfermin.html","text":"","tags":"Pictures"},{"title":"Bristol Dragon Boat Race","url":"//amit.visrolia.net/dragon.html","text":"","tags":"Pictures"},{"title":"Cornwall","url":"//amit.visrolia.net/cornwall.html","text":"","tags":"Pictures"},{"title":"The science of eggs","url":"//amit.visrolia.net/eggs.html","text":"Eggs have two main parts: the yolk, and the white. The shell isn't much use for cooking. The white The white of the egg is a suspension of proteins in water. The main role of the egg white in a recipe is to add volume to a bake. This is most obvious when whipping the egg white, to create a foam, though it still has a simiular effect when mixed into a cake batter. By creating bubbles that entrap gas, the volume increases when the gas is heated up. The use of egg whites is most evident in meringues and soufflés. The scientific bit is that whipping the egg denatures the proteins, which have hydrophobic and hydrophilic groups. So, the denatured protein chains tangle, and hold onto or push away from the water content, forming the foam. When using eggs to entrap gas, futher stabilizers can be added to help maintain the structure of the foam. Something acidic adds more H+ ions to the mix, thus holding on more tightly to the hydrophilic groups. Lemon juice and cream of tartar can be used to fulfil this function. Sugar can also be used as a stabilizer. I'm not sure how that works. The yolk The yolk of an egg is mostly fat, and it's the tasty part of the egg. Its use in baking is as an emulsifier, i.e. its ability to hold water and fats together. This is used in, for example, mayonnaise, hollandaise etc. When an egg yolk is heated, the proteins denature and tangle, to thicken a product. Heat too much, and it forms into lumps, but gently heating, this can be used to thicken a sauce. An example of this is crème pâtissière. Why egg yolk messes up an egg white foam The egg yolk is fatty. Fat molecules are also hydrophobic/philic in places, however they are much smaller than the proteins and unable to interconnect to form a network that eventually forms a foam. As a result, the presence of fat (e.g. egg yolk) prevents the formation of a good egg white foam.","tags":"Notes"},{"title":"Principles of good design","url":"//amit.visrolia.net/rams.html","text":"Innovative Makes a product useful Aesthetic Makes a product understandable Unobtrusive Honest Long-lasting Thorough down to the last detail Environmentally friendly As little design as possible","tags":"Notes"},{"title":"The first 90 days of being a leader","url":"//amit.visrolia.net/90dayleader.html","text":"This 90-day plan has a few tips that I think might be quite a useful target for me. In summary: Day 0 - Accept that this is a different job, with different objectives and responsibilities. Understand where I fit with my team , my peers , and my manager . Days 1-30 - Study! Read up formally about leadership and management. Find a mentor. Don't hide the fact that I'm learning and don't initially know what I'm doing. Days 31-60 - Find a rhythm - a regular schedule. An event loop defines what I should be doing daily, weekly and monthly, for my team, the teams projects, processes, and for myself. Days 61-90 - Self assessment. Now I'll know what the job is about, I can ask myself Am I any good at this? Have I learnt my teams capabilities, can I see where I'm adding value? Do I really want this?","tags":"Notes"},{"title":"Understanding human needs and drivers of performance across culture","url":"//amit.visrolia.net/performance.html","text":"What drives people to perform? Performance can be measured by engagement - being comitted to the job, and making positive contribution to the team. Maslow's hierarchy of needs : after physical needs, people need a sense of belonging, a sense of self-esteem and a sense of meaning. In general, there aren't many differences in motivators across cultures, However, there are across different generations, e.g. the desire for more leisure time. Hertzberg's two factor model : what factors drive satisfaction (motivating factors) and dissatisfaction (hygeine factors)? These are not opposites of each other: removing the dissatisfaction does not automatically lead to satisfaction. Both should be considered! Extrinsic and Intrinsic motivators : Extrinsic motivators - things that the organization provides - pay, recognition/titles/status, rewards etc. Intrinsic motivators - internal, e.g. autonomy, belonging, a sense of meaning. A poor focus on one without the other can actually be de-motivating. E.g. rewarding people (extrinsically) for an intrinsically motiviating task undermines the performance. ‘Pay for performace' works less well than ‘pay for engagement'. Creating meaning at work: linking the work to the customer helps, i.e. seeing the beneficiaries of the work. Outsource motivation!","tags":"Notes"},{"title":"Leading people and teams","url":"//amit.visrolia.net/leading.html","text":"My references on leadership and people management Over the last couple of weeks, I've started watching some videos and reading some books on the topic of being a leader in the workplace. The plan is to develop a bit more into a new role I'm in, an extend my own skillset. Over the course of watching and reading these, I'll use this blog to make a few notes for my own reference. Videos The main resources I've been using are on Coursera . There is a specialization called Leading People and Teams , led by the University of Michigan. The course consists of: Inspiring and Motivating Individuals Managing Talent Influencing People Leading Teams Books The one book I'm reading came up a few times in the Hacker News thread linked below: Peopleware: Productive Projects and Teams Websites and links The original discussion that I used as a source of inspiration, as well as a couple of other links: Hacker News 90-day plan Things I wish I was told","tags":"Notes"},{"title":"Markdown","url":"//amit.visrolia.net/markdown.html","text":"The posts on this blog are written in Markdown. The full specs of Markdown are here , but the most useful commands are summarized here. Markdown is written in a plain text file. Headings Headings are denoted by a series of # characters for heading levels 1-6: # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Formatting Paragraphs are separated by blank lines. Line breaks are added by terminating lines with two spaces. Text formatting: *italic*, **bold**, `monospace`. Text formatting: italic , bold , monospace . The monospace formatting is also useful for escaping certain characters and strings, but also see the code block section below. The escape code for special characters is \\ . Horizontal rules are specified by three or more - characters on a line. --- Links There are two main kinds of link, I'll call them inline and referenced. This is an [inline](//www.example.com) link. And this is a [referenced] [ref] link. [ref]: //www.example.com This is an inline link. And this is a referenced link. Code A code block is indicated by starting the line with 4 spaces (a tab in most of the text editors I've set up). This will format the code in a monospace font, and ensure that everything in the block remains escaped (rather than parsed as Markdown). Pelican also has syntax highlighting support via Pygments. To invoke this, add :::<language> to the beginning of the code block, where <language> is replaced by whatever language you want to highlight for. Alternatively, use #!<language> to add line numbering. There's a demonstration of this on this page. Images Images are incorporated as a special kind of link, preceeded by the ! character. They too come in inline and referenced forms. Inline ! [ Alt text ]( / path / to / img . jpg ) ! [ Alt text ]( / path / to / img . jpg \"Optional title\" ) Referenced ! [ Alt text ][ id ] [ id ] : url / to / image \"Optional title attribute\" Anything else HTML can be incorporated directly into Markdown for anything that's not otherwise easily accomplished.","tags":"Notes"},{"title":"Github pages","url":"//amit.visrolia.net/github-pages.html","text":"How to sync this blog to Github Now that some of the basic functionality of the blog is up and running, I have started to investigate hosting it. I've chosen Github, for the fact that it's simple and free. The way I do this is documented here. The local folder has been set up as a git repository. ghp-import is installed: pip install ghp-import Do the usual initialization and commit: git add . git commit -m \"<message>\" Then, use ghp-import to add files to the branch gh-pages, then push to Github: ghp-import output git push git@github.com:amitviz/amitviz.github.io.git gh-pages:master To be perfectly honest, this seems like a bit much effort. What I should do at some point is to add these commands to the makefile to automate as much as possible.","tags":"Notes"},{"title":"Setting effective goals and expectations","url":"//amit.visrolia.net/goals.html","text":"The link between goals and performance What is the the link between the difficulty of a goal and performance ? Does an easy or tough goal lead to better performance? Performance is strongly correlated to acceptance of a goal. Why do people accept or reject goals? Goals direct effort - towards the desired task, and away from undesired tasks. Stretch goals (challenging goals) can and do drive performance. But, they can promote unethical behaviour! People can begin overstating their achievements, to make it appear that the goals are being met. Stretch goals can also promote dissatisfaction - we measure our performance against our aspirations . Falling short of a tough target hurts more than over-shooting a low target - even if the actual performance is higher in the first case. This can cause people to burn out! SMART goals A good framework for effective goals. Specific Measureable Agreed Reasonable Time bound The down side is that too much focus on a specific goal can make people lose sight of the vision and values, as well as miss the context of our work. They can promote tunnel vision . This is a problem when it limits creativity and learning. Goals should somehow have link to a meaning . This gives people a sense of purpose. The customer can give us a sense of meaning - seeing the product of our work is a motivator.","tags":"Notes"},{"title":"Maths test","url":"//amit.visrolia.net/mathtest.html","text":"Theres a useful plugin for Pelican to render Latex equations, called render_math . Here are a couple of equations to test that it works okay. An equation can be placed in-line, by placing Latex code between a pair of $ characters. Pythagoras' theorem states that \\(a&#94;2 + b&#94;2 = c&#94;2\\) . Alternatively, a pair of $$ characters can be used to include a display equation. The well known formula to determine the roots of a quadratic equation is: $$x = \\frac{-b \\pm \\sqrt{b&#94;2 - 4ac}}{2a}$$ if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Notes"},{"title":"pygments","url":"//amit.visrolia.net/pythonexample.html","text":"Pygments is included in my installation of Pelican. Here are a couple of code fragments to test that syntax highlighting is working correctly. This is an example of a Python file, presented with line numbers: 1 2 3 4 5 6 7 8 9 10 11 12 13 import unittest def median ( pool ): copy = sorted ( pool ) size = len ( copy ) if size % 2 == 1 : return copy [( size - 1 ) / 2 ] else : return ( copy [ size / 2 - 1 ] + copy [ size / 2 ]) / 2 class TestMedian ( unittest . TestCase ): def testMedian ( self ): self . failUnlessEqual ( median ([ 2 , 9 , 9 , 7 , 9 , 2 , 4 , 5 , 8 ]), 7 ) if __name__ == '__main__' : unittest . main () And here a matlab function, this time without line numbers: function echo_number % % Ask the user for a number, and then echo it to the screen. % Quit when the number given is -1. % % Arguments: % none % % this is the value we'll use to terminate the loop quit_value = - 1 ; done_yet = 0 ; while ( done_yet == 0 ) user_value = input ( 'gimme a number ' ); fprintf ( 1 , 'you typed %f \\n' , user_value ); if ( user_value == quit_value ) done_yet = 1 ; end end","tags":"Notes"},{"title":"virtualenv","url":"//amit.visrolia.net/virtualenv.html","text":"A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them. Installing virtualenv: pip install virtualenv Create a virtual environment to install into: virtualenv <name> Activate the virtual environment: source <path>/<name>/bin/activate","tags":"Notes"},{"title":"Influencing people","url":"//amit.visrolia.net/ip.html","text":"Types of power and how to use them to influence people Power: the potential for influence. Types of power: reward power punishment power legitimate or organizational power charismatic power expertise power information power What is power? There are many definitions. Power is the potential ability to influence people. Power is control over resources and outcomes. Power is relative, and it depends on the context. Power can be actual or percepual . The benefits of power Power reduces conformity. Power reduces the feeling of burden. Power increases cardiac output! The dark side of power Power leads to overconfidence, and reduces advice taking. Power makes people more self-focussed, rather than other-focussed. A formal power imbalance in a team leads to less open communication within the team. The bases of power Personal bases: expertise, information, charisma Structural bases: legitimate, reward, punishment Cognitive: beliefs (culture)","tags":"Notes"},{"title":"Becoming a Visionary Leader","url":"//amit.visrolia.net/vision.html","text":"The necessity to create and communicate a vision A vision: creates a sense of shared direction and meaning creates energy defines stretch goals that build confidence A vision is the message that is communicated every day —- through language and actions. It's not the same as a mission statement or slogan! The questions: Why do we do what we do? Why do we exist as a team? What does success look like? What do we create for our customers/stakeholders? How must we act to ensure success? What are our values? Visionary language Refer to fundamental values - not explicitly, but transfer the meaning by means of stories and experiences. Rhetorical questions - questions that provoke thought. Moral conviction - why do we do what we do? Name the customer to create a link for the team. Use inclusive language: \"we\", \"our\". Repeat the message! Non-verbal Vary intonation, volume and pitch when communicating! Smiling Open body posture","tags":"Notes"},{"title":"Shelton Striders 10k 2015","url":"//amit.visrolia.net/shelton10k2015.html","text":"","tags":"Pictures"},{"title":"Chocolate and coffee éclairs","url":"//amit.visrolia.net/eclair.html","text":"","tags":"Pictures"},{"title":"Ardèche and Verdon","url":"//amit.visrolia.net/ardeche.html","text":"","tags":"Pictures"},{"title":"Monte Carlo, Monaco","url":"//amit.visrolia.net/montecarlo.html","text":"","tags":"Pictures"},{"title":"Marseille","url":"//amit.visrolia.net/marseille.html","text":"","tags":"Pictures"},{"title":"Whatstandwell","url":"//amit.visrolia.net/whatstandwell.html","text":"","tags":"Pictures"},{"title":"Cannock Chase 10k 2015","url":"//amit.visrolia.net/cannock10k2015.html","text":"","tags":"Pictures"},{"title":"Edinburgh Half Marathon 2015","url":"//amit.visrolia.net/emf2015.html","text":"EMF - Edinburgh Marathon Festival 1:58:51","tags":"Pictures"},{"title":"Bali","url":"//amit.visrolia.net/bali.html","text":"","tags":"Pictures"},{"title":"Vietnam","url":"//amit.visrolia.net/vietnam.html","text":"","tags":"Pictures"},{"title":"Bushy Park","url":"//amit.visrolia.net/bushypark.html","text":"","tags":"Pictures"},{"title":"Granada","url":"//amit.visrolia.net/granada.html","text":"","tags":"Pictures"},{"title":"Córdoba","url":"//amit.visrolia.net/cordoba.html","text":"","tags":"Pictures"},{"title":"Cádiz","url":"//amit.visrolia.net/cadiz.html","text":"","tags":"Pictures"},{"title":"Sevilla","url":"//amit.visrolia.net/sevilla.html","text":"","tags":"Pictures"},{"title":"Dale","url":"//amit.visrolia.net/dale.html","text":"","tags":"Pictures"},{"title":"Amsterdam","url":"//amit.visrolia.net/amsterdam.html","text":"","tags":"Pictures"},{"title":"Pirahna","url":"//amit.visrolia.net/pirahna.html","text":"","tags":"Pictures"},{"title":"Machu Picchu","url":"//amit.visrolia.net/machupicchu.html","text":"","tags":"Pictures"},{"title":"Derby 10k 2014","url":"//amit.visrolia.net/derby10k2014.html","text":"","tags":"Pictures"},{"title":"Berlin Grand 10k","url":"//amit.visrolia.net/berlin10k.html","text":"58:54","tags":"Pictures"},{"title":"Berlin Light Festival","url":"//amit.visrolia.net/berlinlight.html","text":"","tags":"Pictures"},{"title":"Oktoberfest!","url":"//amit.visrolia.net/oktoberfest.html","text":"","tags":"Pictures"},{"title":"Copenhagen","url":"//amit.visrolia.net/copenhagen.html","text":"","tags":"Pictures"},{"title":"Bratislava","url":"//amit.visrolia.net/bratislava.html","text":"","tags":"Pictures"},{"title":"Brno","url":"//amit.visrolia.net/brno.html","text":"","tags":"Pictures"},{"title":"Budapest","url":"//amit.visrolia.net/budapest.html","text":"","tags":"Pictures"},{"title":"Vienna","url":"//amit.visrolia.net/vienna.html","text":"Sachertorte at Café Landtmann","tags":"Pictures"},{"title":"Prague","url":"//amit.visrolia.net/prague.html","text":"Bar and Books","tags":"Pictures"},{"title":"Berlin Night Run","url":"//amit.visrolia.net/berlin5k.html","text":"10k cut to 5k because of heat 28:59 @ 32°C","tags":"Pictures"},{"title":"Sanssouci","url":"//amit.visrolia.net/sanssouci2.html","text":"","tags":"Pictures"},{"title":"Jüdisches Museum Berlin","url":"//amit.visrolia.net/jewishmuseum.html","text":"","tags":"Pictures"},{"title":"Reichstag","url":"//amit.visrolia.net/reichstag2.html","text":"","tags":"Pictures"},{"title":"Leipzig","url":"//amit.visrolia.net/leipzig.html","text":"","tags":"Pictures"},{"title":"Die Welt","url":"//amit.visrolia.net/diewelt.html","text":"","tags":"Pictures"},{"title":"Sächsische Schweiz","url":"//amit.visrolia.net/saxon.html","text":"","tags":"Pictures"},{"title":"Dresden","url":"//amit.visrolia.net/dresden.html","text":"","tags":"Pictures"},{"title":"Sanssouci","url":"//amit.visrolia.net/sanssouci.html","text":"","tags":"Pictures"},{"title":"Hamburg","url":"//amit.visrolia.net/hamburg.html","text":"","tags":"Pictures"},{"title":"Reichstag","url":"//amit.visrolia.net/reichstag.html","text":"","tags":"Pictures"},{"title":"Pergamon Museum","url":"//amit.visrolia.net/pergamon.html","text":"","tags":"Pictures"},{"title":"Dictators","url":"//amit.visrolia.net/dictators.html","text":"On segments of the Berlin wall.","tags":"Pictures"},{"title":"Synagoge Oranienburger Straße","url":"//amit.visrolia.net/oranienburger.html","text":"","tags":"Pictures"},{"title":"Mercedes-Benz","url":"//amit.visrolia.net/mercedes.html","text":"Berlin Classic Days","tags":"Pictures"},{"title":"Berlin","url":"//amit.visrolia.net/berlin.html","text":"Fernsehturm Home for now!","tags":"Pictures"},{"title":"Tulips","url":"//amit.visrolia.net/tulips.html","text":"","tags":"Pictures"},{"title":"Up a creek","url":"//amit.visrolia.net/wye.html","text":"","tags":"Pictures"},{"title":"Derby 10k 2013","url":"//amit.visrolia.net/derby10k2013.html","text":"First ever 10k: 1:00:17","tags":"Pictures"},{"title":"Salary negotiation","url":"//amit.visrolia.net/salary.html","text":"Kalzumeus : Make More Money, Be More Valued","tags":"Links"},{"title":"Introduction to Matlab: lecture 1","url":"//amit.visrolia.net/matlabbasics.html","text":"Matlab basics The purpose of these lectures is to introduce the students to the MATLAB environment, and use it to solve simple beam finite element problems. At the end of the lectures, the students should have enough information to be able to: Use MATLAB to write complex programmes using multiple functions Use the MATLAB help to get information on new commands and functions Solve the tutorial questions Introduction to Matlab What is MATLAB ? MATLAB is an interactive calculation environment, designed for working with matrices: the MATrix LABoratory MATLAB is also a powerful, but simple and easy-to-use programming language MATLAB also provides a number of `toolboxes' to extend its core functionality MATLAB is available to use on the GIGATERMS server. MATLAB is also available from the BUCS website: University homepage>Computing Services>Software> Secure Downloads Tool Why use MATLAB for finite element analysis? Finite element analysis is a simultaneous equation problem, and we can describe it using matrices: $$[K]\\{u\\} = \\{F\\}$$ MATLAB works natively with matrices as a data type. It can solve such a system by typing in: 1 u = K \\ F Many of the steps involved are also matrix operations, such as coordinate transforms, or matrix inversions. A programming language is also useful to perform repeated operations, such as those applied to elements or nodes in a finite element program. The MATLAB desktop environment Current directory This is where MATLAB first looks for the files that are to be run. Useful to create a new directory for a project. Files A list of all the function and script files in the current directory. Command window This is where commands are entered to MATLAB , and where the results are printed out. Command prompt The >> prompt is where data and commands are typed in. Variables A list of all the variables that are currently held in memory. Simple calculations The command window can be used as a simple calculator ( >> is the MATLAB prompt, you don't need to type it in!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 >> 2 * 2 % multiplication ans = 4 >> sqrt ( 2 ) / 2 % square-root function ans = 0.7071 >> pi * 5 &#94; 2 % built-in variable pi ans = 78.5398 >> cos ( pi / 3 ) % trigonometric functions ans = 0.5000 Variables Variables can be used to store values for use later 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 >> clear all % clear existing variables from memory >> r = 5 ; % radius r >> % note the semi-colon at the end to suppress MATLAB output >> % also note the use of the percent symbol (%) to insert comments >> area1 = pi * r &#94; 2 area1 = 78.5398 >> r = 10 ; >> area2 = pi * r &#94; 2 area2 = 314.1593 >> area2 / area1 ans = 4 Types of variables Any type of data can be stored in a variable, e.g. 1 2 3 4 5 6 7 i = 4 % integer variables j = 4.5 % floating point variables k = 1e-3 % floating point entered in exponential form l = 'some text' % a string of characters Matrices can also be stored in variables. Note: the MATLAB notation 1e-3 is used to represent \\(1 \\times 10&#94;{-3}\\) What is a matrix? A matrix is just a 2D array of values. The matrix can be entered at the command line, surrounding the values with square brackets [ ] . Columns are separated by commas or spaces, rows by semi-colons or line breaks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 >> x = [ 1 2 ; 3 4 ] % entered on a single line x = 1 2 3 4 >> y = [ 5 , 6 ; 7 , 8 ] % can include commas if this helps readability y = 5 6 7 8 >> z = [ 9 10 % press enter before the matrix is ended 11 12 ] % with ], and MATLAB starts a new row z = 9 10 11 12 Some useful matrices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 >> x = zeros ( 2 ) % a square 2x2 matrix of zeros x = 0 0 0 0 >> x = zeros ( 2 , 3 ) % a rectangular zeros matrix % note! row, column order x = 0 0 0 0 0 0 >> y = ones ( 2 ) % a matrix of ones (here, 2x2) % can also be rectangular y = 1 1 1 1 >> z = eye ( 2 ) % a 2x2 identity matrix, I % note! this must be square z = 1 0 0 1 Some terminology Everything is a matrix in MATLAB ! a scalar (single integer or floating point number) is a \\(1\\times1\\) matrix a vector or a list is simply a matrix where one of the dimensions is 1, e.g. a column vector ( zeros(3,1) ) or a row vector ( zeros(1,3) ). a string is a vector of characters an array is a term used for a grid of values: i.e. , a matrix! Some of these terms will be used interchangeably in the remainder of the notes. Addressing matrices Now that we have matrices full of zeros or ones, how do we get some useful information in and out of them? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 >> x = magic ( 3 ) % a built-in function to create a 3x3 % magic-square (all rows, columns and diagonals % add up to the same value) x = 8 1 6 3 5 7 4 9 2 >> x ( 3 , 2 ) % extracting a certain value (note row, columns % order again) ans = 9 >> x ( 3 , 2 ) = 0 % setting the value of a certain element x = 8 1 6 3 5 7 4 0 2 Addressing matrices: the colon operator} To address an entire row or column, we can use the colon ( : ) operator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 >> x = magic ( 3 ); % the same matrix as the previous slide >> x ( 3 ,:) % '3rd row, all the columns' ans = 4 9 2 >> x (:, 2 ) % 'all the rows, 2nd column' ans = 1 5 9 >> x ( 3 ,:) = [ 0 0 0 ] % replacing the 3rd row x = 8 1 6 3 5 7 0 0 0 The colon operator Without any parameters, the colon represents an entire row or column. The colon can also be used with parameters, to represent a range of values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 >> x = 1 : 10 % all the numbers in the range from 1-10 x = 1 2 3 4 5 6 7 8 9 10 >> y = 1 : 3 : 30 % all the numbers in the range from 1-30, in steps of 3 y = 1 4 7 10 13 16 19 22 25 28 >> z = 5 : - 0.5 : 1 % the range 5-1, in steps of -0.5 z = 5.0000 4.5000 4.0000 3.5000 3.0000 2.5000 2.0000 1.5000 1.0000 Specific matrix addressing with the colon We can combine the ‘range' use of the colon to pick out some specific values from a larger matrix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 >> x = magic ( 4 ) % a 4x4 magic square x = 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 >> y = 1 : 2 : 4 % every other number between 1-4 y = 1 3 >> z = x ( y , y ) % pick just these values out from x z = 16 3 9 6 Matrix properties In addition to getting data from the matrix, we can get data about the matrix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 >> x = magic ( 4 ); % as previously >> [ a b ] = size ( x ) % the size of matrix x a = 4 b = 4 >> min ( x ) % the minimum value in each column of x ans = 4 2 3 1 >> max ( x ) % the maximum value in each column of x ans = 16 14 15 13 >> mean ( x ) % the mean value of each column of x ans = 8.5000 8.5000 8.5000 8.5000 More on matrix sizes The size command is very useful, since it will let us write programmes where we don't know before hand how large our matrices and vectors will be. The size command can be used as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 >> x = zeros ( 5 , 2 ); % an example matrix with 5 rows and 2 columns >> [ a b ] = size ( x ) % as we've seen before, we can get the dimensions using size() a = 5 b = 2 % if we know which dimension we want, we can specify it as an optional argument % to the size function >> size ( x , 1 ) % the first dimension of x (i.e. number of rows) ans = 5 >> size ( x , 2 ) % the second dimension of x (i.e. number of columns) ans = 2 % if we have a vector (a matrix with one of the dimensions as 1) we can also use >> y = zeros ( 1 , 6 ); % a row vector >> z = zeros ( 8 , 1 ); % a column vector >> length ( y ) ans = 6 >> length ( z ) ans = 8 Matrix algebra Matrix algebra can be performed with the MATLAB matrices, e.g. for the system \\(Ax = b\\) , 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 >> A = magic ( 3 ) % a 3x3 magic square A = 8 1 6 3 5 7 4 9 2 >> x = [ 1 ; 2 ; 3 ] % a column vector x x = 1 2 3 >> b = A * x % matrix multiplication to find b b = 28 34 28 >> x = inv ( A ) * b % if b is known, we can find x by inverting A x = 1.0000 2.0000 3.0000 >> x = A \\ b % more efficient than inverting A is using the backslash operator x = 1 2 3 Matrix algebra II Some of the most useful functions are those to find the inverse and transpose of a matrix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >> A = magic ( 3 ) % the 3x3 magic square A = 8 1 6 3 5 7 4 9 2 >> inv ( A ) % the inverse of matrix A ans = 0.1472 - 0.1444 0.0639 - 0.0611 0.0222 0.1056 - 0.0194 0.1889 - 0.1028 >> A ' % the transpose of A, using the inverted comma ans = 8 3 4 1 5 9 6 7 2 Inverting the matrix is a computationally expensive problem. Although a system \\(Ax = b\\) can be solved as \\(x = A&#94;{-1}b\\) , the backslash operator ( A\\b ) uses Gaussian elimination to solve without explicitly calculating \\(A&#94;{-1}\\) . Array algebra} MATLAB treats everything as a matrix, but occasionally, we might want to treat a variable as simply a list (or grid) of values, rather than a matrix in the mathematical sense. MATLAB behaves as expected when we multiply a ‘matrix' or vector by a scalar, or add two matrices, and also includes a number of piecewise operators . 1 2 3 4 5 6 7 8 9 10 11 12 13 >> x = 1 : 3 ; % x = [1 2 3] >> y = 2 * x % multiply by a scalar y = 2 4 6 >> x + y % add 2 vectors (1D matrices) ans = 3 6 9 >> x .* y % perform a piecewise multiplication (note the dot before the *) ans = 2 8 18 >> x ./ y % perform a piecewise division (note the dot before the /) ans = 0.5000 0.5000 0.5000 Note, matrix algebra rules don't allow us to perform ordinary multiplication between two vectors each of size \\(1\\times3\\) . We could however transpose one of the vectors ( e.g. y = y' ). MATLAB scripting When we want to perform the same actions over and over again, we can save the steps in a MATLAB script. A MATLAB script is just a series of commands, exactly as they would appear if they were typed in at the command prompt. Here, we shall write a script to solve the roots ( \\(y=0\\) ) of the quadratic equation: $$ y = ax&#94;2 + bx + c $$ A reminder, the solution is given by: $$ x = \\frac{-b\\pm\\sqrt{b&#94;2 - 4ac}}{2a} $$ MATLAB scripting—the editor MATLAB scripting—example Using the commands that we already know, we can write the script: 1 2 3 4 5 6 7 8 a = 1 ; % the input parameters: note the semi-colon at the end of the b = - 5 ; % line to stop MATLAB from printing out these lines c = 6 ; % Here, the calculation is performed. x1 = ( - b + sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a x2 = ( - b - sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a % Since there's no semi-colon at the end, the results will be printed out. If we save this file as quadscript.m , we can run it by typing the name quadscript at the command prompt: 1 2 3 4 5 >> quadscript x1 = 3 x2 = 2 We could keep this script, and change the coefficients every time we wanted to solve a different problem, but there is a way we can write a script that we can use for any problem. Adding interactivity to scripts Instead of including the coefficients in the script ( hard-coding them) we could instead ask the user using the input function: 1 2 3 4 5 6 7 disp ( 'Solving the equation: ax&#94;2 + bx + c' ); % display some info for the user a = input ( 'Please input the value of a:' ); b = input ( 'Please input the value of b:' ); % get parameters typed in c = input ( 'Please input the value of c:' ); x1 = ( - b + sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a % exactly the same as previously x2 = ( - b - sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a Saving as quadscript2.m and running: 1 2 3 4 5 6 7 8 9 >> quadscript2 Solving the equation : ax &#94; 2 + bx + c Please input the value of a : 1 Please input the value of b : - 5 Please input the value of c : 6 x1 = 3 x2 = 2 This is useful where we want input from the user, but we can't run a large programme that stops to ask for each new variable… MATLAB functions A function is a self-contained piece of code that accepts a number of input variables, processes them, and then returns a number of answers. We have already seen some of MATLAB 's built-in functions: cos(x) (and similar trigonometric functions): takes an angle \\(x\\) as its argument , or parameter , and returns the cosine of the angle size(x) : takes a matrix \\(x\\) (remember: everything is a matrix!) and returns two values, the number of rows and the number of columns in the matrix The purpose of functions Functions can be called in a number of ways, e.g. 1 2 3 4 5 6 7 8 9 10 11 12 >> cos ( 0.7854 ) % supplying the argument directly to the function ans = 0.7071 >> theta = 0.7854 ; >> cos ( theta ) % supplying a variable to the function ans = 0.7071 >> cos ( pi / 4 ) % evaluating an expression as an argument ans = 0.7071 All three methods here are equivalent. When all the input arguments are known, the function can calculate the outputs with no further intervention from the user. The input arguments can even come from another part of the programme. Defining a function A MATLAB function is created in a file with a .m extension (just as a script). The first line of the script must take the following form, using the keyword function : 1 function [outputs] = function_name ( input_arguments ) The function must be saved with the file name matching the function name (here, function_name.m ). Somewhere, within the function file, all the outputs must be set. Ideally, the function should also end with return; , to return programme control to wherever the function was called from. An example function The file quadratic.m contains the following: 1 2 3 4 5 6 7 function [x1,x2] = quadratic ( a,b,c ) % A function to return the roots of a quadratic equation x1 = ( - b + sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a ; % note the semi-colon to suppress output: we don't need x2 = ( - b - sqrt ( b &#94; 2 - 4 * a * c )) / 2 * a ; % the answer printed every time the function is called return ; \\(a,b,c\\) are the arguments, \\(x1,x2\\) are the return values. A comment is useful to explain what the function does: you may end up using this function in many other programmes, or it may even be used by many other people in their programmes. 1 2 3 4 5 >> [ x1 , x2 ] = quadratic ( 1 , - 5 , 6 ) x1 = 3 x2 = 2 Getting help MATLAB has a comprehensive online help, which details all the functions and how to use them. Additionally, a free online book, Numerical Computing with MATLAB , is available, written by the inventor of MATLAB , Cleve Moler. Flow control in functions An important part of a programme is its ability to make decisions based on input, and take actions based on that decision. There are two main ways of doing this: 1 2 3 4 5 6 7 if ( condition ) % actions to perform if condition is true elseif ( condition2 ) % actions to perform if condition2 is true else % actions to perform if none of the above were true end or 1 2 3 4 5 6 7 8 switch condition case condition1 % actions to perform if condition==condition1 case condition2 % actions to perform if condition==condition2 otherwise % actions to perform if condition doesn't match any of the above cases end The conditions in both the if and switch expressions are based on logical variables , i.e. those that evaluate to true or false. Logical operators A logical variable can have a value of true or false . Logical variables are normally created as the results of a comparison operation, and used for conditional statements (like if ). The logical operators and their meanings are as follows - a and b are any type of variable: a == b a is equal to b (using a = b is the most common error in if statements) a \\~= b a is not equal to b a < b; a <= b; a > b; a >= b a is less than (or equal to), or greater than (or equal to) b And where a and b are already logical variables themselves: a \\&\\& b ; a \\& b both a and b are true (scalar and vector) a \\|\\| b ; a \\| b either one of a or b is true (including both are true) (scalar and vector) \\~a a special negation operator, i.e. \\(\\sim\\) true is false, and \\(\\sim\\) false is true Conditional statement example Here is an example we might use in a finite element code, to detect if our elements meet a failure criteria: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 if ( abs ( stress ) > = criticalstress ) && ( stress > 0 ) % The abs() function returns the absolute value (or magnitude) of a variable % abs(stress) and criticalstress are numerical variables, the comparison % will return either TRUE or FALSE (i.e. a logical variable) % Similarly, (stress > 0) will return TRUE or FALSE (i.e. a logical variable) % The && operator compares the two logical variables % Here is the case for TRUE, i.e. % abs(stress) >= criticalstress is TRUE % stress > 0 is TRUE disp ( 'Element fails under tension' ); % The disp() function displays a string in the command window elseif ( abs ( stress ) > = criticalstress ) && ( stress < 0 ) % Here, if the first conditional wasn't TRUE, we can try another disp ( 'Element fails under compression' ); else % Here, is the default action to carry out if none of the conditions were TRUE disp ( 'Element does not fail' ); end Looping in functions In addition to conditional decision making, programmes are useful for repeatedly performing the same operation, or performing an operation on a sequence of variables. MATLAB gives us two methods for looping: 1 2 3 4 5 for loop_variable = range % actions to perform using the loop_variable % use when we want to perform the actions a set number of times end or 1 2 3 4 5 6 while condition % actions to perform while condition == TRUE (using the logical operators we % saw earlier % use when we don't know how many times the loop needs to run end Loops are incredibly useful, but there are occasions where their use is unnecessary, and even slows down the programme… Avoiding loops An example of where we might want to use a loop is in a finite element programme: if we have a vector of the strains in all of our elements, we might want to work out the stress. Using loops, we could do: 1 2 3 4 5 6 for i = 1 : length ( strains ) % we can let the programme work out how many times % it needs to run the loop % i is the loop variable % the i-th stress is calculated by multiplying the i-th strain by the modulus stresses ( i ) = modulus * strains ( i ); end But since MATLAB is designed (and optimized) to work with matrices (including vectors), we could use instead: 1 2 3 4 5 % if modulus is a scalar (i.e. there is one modulus for all locations) stresses = modulus * strains ; % even if modulus is a vector with a different value at each location, we can use stresses = modulus .* strains ; stresses and strains are still vectors, but we've made the code much simpler to read, as well as much faster. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Notes"}]}